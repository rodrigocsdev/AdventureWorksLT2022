{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7221/api/Product'; // URL da API\n  }\n  // Método para obter todos os produtos (sem paginação)\n  getProducts() {\n    return this.http.get(this.apiUrl).pipe(catchError(error => {\n      console.error('Erro ao obter produtos', error);\n      throw error; // ou você pode retornar um valor padrão ou mensagem de erro\n    }));\n  }\n  // Método para obter os produtos com paginação\n  getProductsWithPagination(page, pageSize) {\n    const params = new HttpParams().set('page', page.toString()).set('pageSize', pageSize.toString());\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(catchError(error => {\n      console.error('Erro ao obter produtos com paginação', error);\n      throw error;\n    }));\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAC7D,SAAqBC,UAAU,QAAQ,MAAM;;;AAM7C,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,oCAAoC,CAAC,CAAE;EAEhB;EAExC;EACAC,WAAW;IACT,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAY,IAAI,CAACC,MAAM,CAAC,CAACC,IAAI,CAC/CP,UAAU,CAAEQ,KAAK,IAAI;MACnBC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK,CAAC,CAAE;IAChB,CAAC,CAAC,CACH;EACH;EAEA;EACAE,yBAAyB,CAACC,IAAY,EAAEC,QAAgB;IACtD,MAAMC,MAAM,GAAG,IAAId,UAAU,EAAE,CAC5Be,GAAG,CAAC,MAAM,EAAEH,IAAI,CAACI,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,UAAU,EAAEF,QAAQ,CAACG,QAAQ,EAAE,CAAC;IAEvC,OAAO,IAAI,CAACZ,IAAI,CAACE,GAAG,CAAM,IAAI,CAACC,MAAM,EAAE;MAAEO;IAAM,CAAE,CAAC,CAACN,IAAI,CACrDP,UAAU,CAAEQ,KAAK,IAAI;MACnBC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;;AA3BWP,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAe,SAAdf,cAAc;EAAAgB,YAFb;AAAM","names":["HttpParams","catchError","ProductService","constructor","http","getProducts","get","apiUrl","pipe","error","console","getProductsWithPagination","page","pageSize","params","set","toString","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\rodri\\source\\repos\\AdventureWorksLT2022\\ClientApp\\src\\app\\service\\product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, catchError } from 'rxjs';\r\nimport { Product } from '../models/product.model';  // Certifique-se de que o caminho está correto\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductService {\r\n  private apiUrl = 'https://localhost:7221/api/Product';  // URL da API\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Método para obter todos os produtos (sem paginação)\r\n  getProducts(): Observable<Product[]> {\r\n    return this.http.get<Product[]>(this.apiUrl).pipe(\r\n      catchError((error) => {\r\n        console.error('Erro ao obter produtos', error);\r\n        throw error;  // ou você pode retornar um valor padrão ou mensagem de erro\r\n      })\r\n    );\r\n  }\r\n\r\n  // Método para obter os produtos com paginação\r\n  getProductsWithPagination(page: number, pageSize: number): Observable<any> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('pageSize', pageSize.toString());\r\n\r\n    return this.http.get<any>(this.apiUrl, { params }).pipe(\r\n      catchError((error) => {\r\n        console.error('Erro ao obter produtos com paginação', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}